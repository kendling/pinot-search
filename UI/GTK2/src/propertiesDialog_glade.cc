// generated 2006/1/5 9:17:19 SGT by fabrice@thorgrim.dyndns.org.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/fabrice/Projects/MetaSE/pinot/UI/GTK2/metase-gtk2.glade
// for gtk 2.6.10 and gtkmm 2.6.2
//
// Please modify the corresponding derived classes in ./src/propertiesDialog.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "propertiesDialog_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/button.h>
#include <gtkmm/buttonbox.h>
#include <gtkmm/table.h>
#include <gtkmm/viewport.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/box.h>

propertiesDialog_glade::propertiesDialog_glade(
)
{  propertiesDialog = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Button *cancelbutton2 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cancel")));
   labelOkButton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-ok")));
   titleEntry = Gtk::manage(new class Gtk::Entry());
   extractTextview = Gtk::manage(new class Gtk::TextView());
   extractScrolledwindow = Gtk::manage(new class Gtk::ScrolledWindow());
   titleLabel = Gtk::manage(new class Gtk::Label(_("Title:")));
   extractLabel = Gtk::manage(new class Gtk::Label(_("Extract:")));
   languageLabel = Gtk::manage(new class Gtk::Label(_("Language:")));
   languageEntry = Gtk::manage(new class Gtk::Entry());
   typeLabel = Gtk::manage(new class Gtk::Label(_("MIME type:")));
   typeEntry = Gtk::manage(new class Gtk::Entry());
   
   Gtk::Table *propertiesTable = Gtk::manage(new class Gtk::Table(2, 2, false));
   labelsTreeview = Gtk::manage(new class Gtk::TreeView());
   
   Gtk::Viewport *viewport1 = Gtk::manage(new class Gtk::Viewport(*manage(new Gtk::Adjustment(0,0,1)), *manage(new Gtk::Adjustment(0,0,1))));
   labelsScrolledwindow = Gtk::manage(new class Gtk::ScrolledWindow());
   
   Gtk::VBox *propertiesVbox = Gtk::manage(new class Gtk::VBox(false, 0));
   cancelbutton2->set_flags(Gtk::CAN_FOCUS);
   cancelbutton2->set_flags(Gtk::CAN_DEFAULT);
   cancelbutton2->set_relief(Gtk::RELIEF_NORMAL);
   labelOkButton->set_flags(Gtk::CAN_FOCUS);
   labelOkButton->set_flags(Gtk::CAN_DEFAULT);
   labelOkButton->set_relief(Gtk::RELIEF_NORMAL);
   propertiesDialog->get_action_area()->property_layout_style().set_value(Gtk::BUTTONBOX_END);
   titleEntry->set_flags(Gtk::CAN_FOCUS);
   titleEntry->set_visibility(true);
   titleEntry->set_editable(true);
   titleEntry->set_max_length(0);
   titleEntry->set_has_frame(true);
   titleEntry->set_activates_default(false);
   extractTextview->set_flags(Gtk::CAN_FOCUS);
   extractTextview->set_editable(true);
   extractTextview->set_cursor_visible(true);
   extractTextview->set_pixels_above_lines(0);
   extractTextview->set_pixels_below_lines(0);
   extractTextview->set_pixels_inside_wrap(0);
   extractTextview->set_left_margin(3);
   extractTextview->set_right_margin(0);
   extractTextview->set_indent(0);
   extractTextview->set_wrap_mode(Gtk::WRAP_NONE);
   extractTextview->set_justification(Gtk::JUSTIFY_LEFT);
   extractScrolledwindow->set_flags(Gtk::CAN_FOCUS);
   extractScrolledwindow->set_shadow_type(Gtk::SHADOW_IN);
   extractScrolledwindow->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   extractScrolledwindow->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   extractScrolledwindow->add(*extractTextview);
   titleLabel->set_alignment(0,0.5);
   titleLabel->set_padding(4,4);
   titleLabel->set_justify(Gtk::JUSTIFY_LEFT);
   titleLabel->set_line_wrap(false);
   titleLabel->set_use_markup(false);
   titleLabel->set_selectable(false);
   extractLabel->set_alignment(0,0.5);
   extractLabel->set_padding(4,4);
   extractLabel->set_justify(Gtk::JUSTIFY_LEFT);
   extractLabel->set_line_wrap(false);
   extractLabel->set_use_markup(false);
   extractLabel->set_selectable(false);
   languageLabel->set_alignment(0,0.5);
   languageLabel->set_padding(4,4);
   languageLabel->set_justify(Gtk::JUSTIFY_LEFT);
   languageLabel->set_line_wrap(false);
   languageLabel->set_use_markup(false);
   languageLabel->set_selectable(false);
   languageEntry->set_flags(Gtk::CAN_FOCUS);
   languageEntry->set_visibility(true);
   languageEntry->set_editable(false);
   languageEntry->set_max_length(0);
   languageEntry->set_has_frame(true);
   languageEntry->set_activates_default(false);
   typeLabel->set_alignment(0,0.5);
   typeLabel->set_padding(4,4);
   typeLabel->set_justify(Gtk::JUSTIFY_LEFT);
   typeLabel->set_line_wrap(false);
   typeLabel->set_use_markup(false);
   typeLabel->set_selectable(false);
   typeEntry->set_flags(Gtk::CAN_FOCUS);
   typeEntry->set_visibility(true);
   typeEntry->set_editable(false);
   typeEntry->set_max_length(0);
   typeEntry->set_has_frame(true);
   typeEntry->set_activates_default(false);
   propertiesTable->set_row_spacings(0);
   propertiesTable->set_col_spacings(0);
   propertiesTable->attach(*titleEntry, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
   propertiesTable->attach(*extractScrolledwindow, 1, 2, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
   propertiesTable->attach(*titleLabel, 0, 1, 0, 1, Gtk::FILL, Gtk::FILL, 0, 0);
   propertiesTable->attach(*extractLabel, 0, 1, 1, 2, Gtk::FILL, Gtk::FILL, 0, 0);
   propertiesTable->attach(*languageLabel, 0, 1, 2, 3, Gtk::FILL, Gtk::FILL, 0, 0);
   propertiesTable->attach(*languageEntry, 1, 2, 2, 3, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
   propertiesTable->attach(*typeLabel, 0, 1, 3, 4, Gtk::FILL, Gtk::FILL, 0, 0);
   propertiesTable->attach(*typeEntry, 1, 2, 3, 4, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
   labelsTreeview->set_flags(Gtk::CAN_FOCUS);
   labelsTreeview->set_headers_visible(true);
   labelsTreeview->set_rules_hint(false);
   labelsTreeview->set_reorderable(false);
   labelsTreeview->set_enable_search(true);
   viewport1->set_shadow_type(Gtk::SHADOW_IN);
   viewport1->add(*labelsTreeview);
   labelsScrolledwindow->set_flags(Gtk::CAN_FOCUS);
   labelsScrolledwindow->set_border_width(4);
   labelsScrolledwindow->set_shadow_type(Gtk::SHADOW_NONE);
   labelsScrolledwindow->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   labelsScrolledwindow->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   labelsScrolledwindow->add(*viewport1);
   propertiesVbox->pack_start(*propertiesTable, Gtk::PACK_SHRINK, 0);
   propertiesVbox->pack_start(*labelsScrolledwindow);
   propertiesDialog->get_vbox()->set_homogeneous(false);
   propertiesDialog->get_vbox()->set_spacing(0);
   propertiesDialog->get_vbox()->pack_start(*propertiesVbox);
   propertiesDialog->set_title(_("Properties"));
   propertiesDialog->set_modal(false);
   propertiesDialog->property_window_position().set_value(Gtk::WIN_POS_NONE);
   propertiesDialog->set_resizable(true);
   propertiesDialog->property_destroy_with_parent().set_value(false);
   propertiesDialog->set_has_separator(true);
   propertiesDialog->add_action_widget(*cancelbutton2, -6);
   propertiesDialog->add_action_widget(*labelOkButton, -5);
   cancelbutton2->show();
   labelOkButton->show();
   titleEntry->show();
   extractTextview->show();
   extractScrolledwindow->show();
   titleLabel->show();
   extractLabel->show();
   languageLabel->show();
   languageEntry->show();
   typeLabel->show();
   typeEntry->show();
   propertiesTable->show();
   labelsTreeview->show();
   viewport1->show();
   labelsScrolledwindow->show();
   propertiesVbox->show();
   labelOkButton->signal_clicked().connect(SigC::slot(*this, &propertiesDialog_glade::on_labelOkButton_clicked), false);
}

propertiesDialog_glade::~propertiesDialog_glade()
{  delete gmm_data;
}
