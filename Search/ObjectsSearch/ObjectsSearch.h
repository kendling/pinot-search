namespace OSAPI
{
/*  Web Services Definitions  */

/*  Modify this file to customize the generated data type declarations */

/*

**  The gSOAP WSDL parser for C and C++ 1.1.2
**  Copyright (C) 2001-2004 Robert van Engelen, Genivia, Inc.
**  All Rights Reserved. This product is provided "as is", without any warranty.


--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2001-2004, Robert van Engelen, Genivia, Inc. All Rights Reserved.

GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
*/

//gsoapopt w
#import "stl.h"

/*
To customize the names of the namespace prefixes generated by wsdl2h, modify
the prefix names below and add the modified lines to typemap.dat to run wsdl2h:

osapi1 = urn:OS_Search
*/

//gsoap osapi1 schema namespace:	urn:OS_Search

// forward declarations
class osapi1__OS_USCORESearchResultElement;
class ArrayOfOS_USCORESearchResultElement;
class osapi1__OS_USCORESearchResult;


class osapi1__OS_USCORESearchResultElement
{ public:
    std::string*                         URL                           ;//nillable
    std::string*                         summary                       ;//nillable
    std::string*                         title                         ;//nillable
    struct soap                         *soap                          ;
};

class osapi1__OS_USCORESearchResult
{ public:
    ArrayOfOS_USCORESearchResultElement*  resultElements                ;//nillable
    int                                  endIndex                      ;
    int                                  startIndex                    ;
    std::string*                         searchQuery                   ;//nillable
    int                                  estimatedTotalResultsCount    ;
    struct soap                         *soap                          ;
};

// SOAP encoded array ArrayOfOS_USCORESearchResultElement
class ArrayOfOS_USCORESearchResultElement
{ public:
    osapi1__OS_USCORESearchResultElement* *__ptr                         ;
    int                                  __size                        ;
    struct soap                         *soap                          ;
};

/* Service betaSoapBinding operations:

  osapi2__doSearch

*/

//gsoap osapi2 service name:	betaSoapBinding 
//gsoap osapi2 service type:	beta 
//gsoap osapi2 service port:	http://www.objectssearch.com/search/services/beta 
//gsoap osapi2 service namespace:	http://www.objectssearch.com/search/services/beta 

/* Service betaSoapBinding operation osapi2__doSearch

  C stub function (defined in soapClient.c[pp]):
  int soap_call_osapi2__doSearch(struct soap *soap,
    NULL, (char *endpoint = NULL selects default endpoint for this operation)
    NULL, (char *action = NULL selects default action for this operation)
    std::string                         queryParameter,
    int                                 startParameter,
    int                                 hitsPerPageParameter,
  struct osapi2__doSearchResponse {
    osapi1__OS_USCORESearchResult*      doSearchReturn;
  } & );

  C++ proxy class (defined in soapbetaSoapBindingProxy.h):
  class betaSoapBinding;

*/

//gsoap osapi2 service method-style:	doSearch rpc
//gsoap osapi2 service method-encoding:	doSearch http://schemas.xmlsoap.org/soap/encoding/
//gsoap osapi2 service method-action:	doSearch ""
int osapi2__doSearch(
    std::string                         _queryParameter,
    int                                 _startParameter,
    int                                 _hitsPerPageParameter,
  struct osapi2__doSearchResponse {
    osapi1__OS_USCORESearchResult*      _doSearchReturn;
  } & );

/*  End of Web Services Definitions  */
}
