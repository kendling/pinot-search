namespace GAPI
{
/*  Web Services Definitions urn:GoogleSearch */

/*  Modify this file to customize the generated data type declarations */

/*

**  The gSOAP WSDL parser for C and C++ 1.1.2
**  Copyright (C) 2001-2004 Robert van Engelen, Genivia, Inc.
**  All Rights Reserved. This product is provided "as is", without any warranty.


--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2001-2004, Robert van Engelen, Genivia, Inc. All Rights Reserved.

GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
*/

//gsoapopt w
#import "stl.h"
// built-in type "xs:base64Binary":
class xsd__base64Binary { unsigned char *__ptr; int __size; };

/*
To customize the names of the namespace prefixes generated by wsdl2h, modify
the prefix names below and add the modified lines to typemap.dat to run wsdl2h:

gapi1 = urn:GoogleSearch
*/

//gsoap gapi1 schema namespace:	urn:GoogleSearch

// forward declarations
class gapi1__GoogleSearchResult;
class gapi1__ResultElement;
class ResultElementArray;
class DirectoryCategoryArray;
class gapi1__DirectoryCategory;


class gapi1__GoogleSearchResult
{ public:
    bool                                 documentFiltering             ;
    std::string                          searchComments                ;
    int                                  estimatedTotalResultsCount    ;
    bool                                 estimateIsExact               ;
    ResultElementArray*                  resultElements                ;
    std::string                          searchQuery                   ;
    int                                  startIndex                    ;
    int                                  endIndex                      ;
    std::string                          searchTips                    ;
    DirectoryCategoryArray*              directoryCategories           ;
    double                               searchTime                    ;
    struct soap                         *soap                          ;
};

class gapi1__ResultElement
{ public:
    std::string                          summary                       ;
    std::string                          URL                           ;
    std::string                          snippet                       ;
    std::string                          title                         ;
    std::string                          cachedSize                    ;
    bool                                 relatedInformationPresent     ;
    std::string                          hostName                      ;
    gapi1__DirectoryCategory*            directoryCategory             ;
    std::string                          directoryTitle                ;
    struct soap                         *soap                          ;
};

class gapi1__DirectoryCategory
{ public:
    std::string                          fullViewableName              ;
    std::string                          specialEncoding               ;
    struct soap                         *soap                          ;
};

// SOAP encoded array ResultElementArray
class ResultElementArray
{ public:
    gapi1__ResultElement*               *__ptr                         ;
    int                                  __size                        ;
    struct soap                         *soap                          ;
};

// SOAP encoded array DirectoryCategoryArray
class DirectoryCategoryArray
{ public:
    gapi1__DirectoryCategory*           *__ptr                         ;
    int                                  __size                        ;
    struct soap                         *soap                          ;
};

/* Service GoogleSearchBinding operations:

  gapi1__doGetCachedPage
  gapi1__doSpellingSuggestion
  gapi1__doGoogleSearch

*/

//gsoap gapi1 service name:	GoogleSearchBinding 
//gsoap gapi1 service type:	GoogleSearchPort 
//gsoap gapi1 service port:	http://api.google.com/search/beta2 
//gsoap gapi1 service namespace:	urn:GoogleSearch 

/* Service GoogleSearchBinding operation gapi1__doGetCachedPage

  C stub function (defined in soapClient.c[pp]):
  int soap_call_gapi1__doGetCachedPage(struct soap *soap,
    NULL, (char *endpoint = NULL selects default endpoint for this operation)
    NULL, (char *action = NULL selects default action for this operation)
    std::string                         key,
    std::string                         url,
  struct gapi1__doGetCachedPageResponse {
    xsd__base64Binary                   return_;
  } & );

  C++ proxy class (defined in soapGoogleSearchBindingProxy.h):
  class GoogleSearchBinding;

*/

//gsoap gapi1 service method-style:	doGetCachedPage rpc
//gsoap gapi1 service method-encoding:	doGetCachedPage http://schemas.xmlsoap.org/soap/encoding/
//gsoap gapi1 service method-action:	doGetCachedPage urn:GoogleSearchAction
int gapi1__doGetCachedPage(
    std::string                         key,
    std::string                         url,
  struct gapi1__doGetCachedPageResponse {
    xsd__base64Binary                   return_;
  } & );

/* Service GoogleSearchBinding operation gapi1__doSpellingSuggestion

  C stub function (defined in soapClient.c[pp]):
  int soap_call_gapi1__doSpellingSuggestion(struct soap *soap,
    NULL, (char *endpoint = NULL selects default endpoint for this operation)
    NULL, (char *action = NULL selects default action for this operation)
    std::string                         key,
    std::string                         phrase,
  struct gapi1__doSpellingSuggestionResponse {
    std::string                         return_;
  } & );

  C++ proxy class (defined in soapGoogleSearchBindingProxy.h):
  class GoogleSearchBinding;

*/

//gsoap gapi1 service method-style:	doSpellingSuggestion rpc
//gsoap gapi1 service method-encoding:	doSpellingSuggestion http://schemas.xmlsoap.org/soap/encoding/
//gsoap gapi1 service method-action:	doSpellingSuggestion urn:GoogleSearchAction
int gapi1__doSpellingSuggestion(
    std::string                         key,
    std::string                         phrase,
  struct gapi1__doSpellingSuggestionResponse {
    std::string                         return_;
  } & );

/* Service GoogleSearchBinding operation gapi1__doGoogleSearch

  C stub function (defined in soapClient.c[pp]):
  int soap_call_gapi1__doGoogleSearch(struct soap *soap,
    NULL, (char *endpoint = NULL selects default endpoint for this operation)
    NULL, (char *action = NULL selects default action for this operation)
    std::string                         key,
    std::string                         q,
    int                                 start,
    int                                 maxResults,
    bool                                filter,
    std::string                         restrict_,
    bool                                safeSearch,
    std::string                         lr,
    std::string                         ie,
    std::string                         oe,
  struct gapi1__doGoogleSearchResponse {
    gapi1__GoogleSearchResult*          return_;
  } & );

  C++ proxy class (defined in soapGoogleSearchBindingProxy.h):
  class GoogleSearchBinding;

*/

//gsoap gapi1 service method-style:	doGoogleSearch rpc
//gsoap gapi1 service method-encoding:	doGoogleSearch http://schemas.xmlsoap.org/soap/encoding/
//gsoap gapi1 service method-action:	doGoogleSearch urn:GoogleSearchAction
int gapi1__doGoogleSearch(
    std::string                         key,
    std::string                         q,
    int                                 start,
    int                                 maxResults,
    bool                                filter,
    std::string                         restrict_,
    bool                                safeSearch,
    std::string                         lr,
    std::string                         ie,
    std::string                         oe,
  struct gapi1__doGoogleSearchResponse {
    gapi1__GoogleSearchResult*          return_;
  } & );

/*  End of Web Services Definitions urn:GoogleSearch */
}
