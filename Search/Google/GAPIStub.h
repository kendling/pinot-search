/* GAPIStub.h
   Generated by gSOAP 2.7.8c from GoogleSearch.h
   Copyright (C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef GAPIStub_H
#define GAPIStub_H
#include <vector>
#define WITH_NONAMESPACES
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/




#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (7)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() : __ptr(NULL), id(NULL), type(NULL), options(NULL), soap(NULL) { }
	virtual ~xsd__base64Binary() { }
};
#endif

#if 0 /* volatile type: do no redeclare */

#endif

#ifndef SOAP_TYPE_gapi1__GoogleSearchResult
#define SOAP_TYPE_gapi1__GoogleSearchResult (15)
/* gapi1:GoogleSearchResult */
class SOAP_CMAC gapi1__GoogleSearchResult
{
public:
	bool documentFiltering;	/* required element of type xsd:boolean */
	std::string searchComments;	/* required element of type xsd:string */
	int estimatedTotalResultsCount;	/* required element of type xsd:int */
	bool estimateIsExact;	/* required element of type xsd:boolean */
	class gapi1ResultElementArray *resultElements;	/* required element of type ArrayOfResultElement */
	std::string searchQuery;	/* required element of type xsd:string */
	int startIndex;	/* required element of type xsd:int */
	int endIndex;	/* required element of type xsd:int */
	std::string searchTips;	/* required element of type xsd:string */
	class gapi1DirectoryCategoryArray *directoryCategories;	/* required element of type ArrayOfDirectoryCategory */
	double searchTime;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_gapi1__GoogleSearchResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         gapi1__GoogleSearchResult() : resultElements(NULL), directoryCategories(NULL), soap(NULL) { }
	virtual ~gapi1__GoogleSearchResult() { }
};
#endif

#ifndef SOAP_TYPE_gapi1__ResultElement
#define SOAP_TYPE_gapi1__ResultElement (16)
/* gapi1:ResultElement */
class SOAP_CMAC gapi1__ResultElement
{
public:
	std::string summary;	/* required element of type xsd:string */
	std::string URL;	/* required element of type xsd:string */
	std::string snippet;	/* required element of type xsd:string */
	std::string title;	/* required element of type xsd:string */
	std::string cachedSize;	/* required element of type xsd:string */
	bool relatedInformationPresent;	/* required element of type xsd:boolean */
	std::string hostName;	/* required element of type xsd:string */
	class gapi1__DirectoryCategory *directoryCategory;	/* required element of type gapi1:DirectoryCategory */
	std::string directoryTitle;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_gapi1__ResultElement */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         gapi1__ResultElement() : directoryCategory(NULL), soap(NULL) { }
	virtual ~gapi1__ResultElement() { }
};
#endif

#ifndef SOAP_TYPE_gapi1__DirectoryCategory
#define SOAP_TYPE_gapi1__DirectoryCategory (19)
/* gapi1:DirectoryCategory */
class SOAP_CMAC gapi1__DirectoryCategory
{
public:
	std::string fullViewableName;	/* required element of type xsd:string */
	std::string specialEncoding;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_gapi1__DirectoryCategory */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         gapi1__DirectoryCategory() : soap(NULL) { }
	virtual ~gapi1__DirectoryCategory() { }
};
#endif

#ifndef SOAP_TYPE_gapi1ResultElementArray
#define SOAP_TYPE_gapi1ResultElementArray (17)
/* SOAP encoded array of gapi1:ResultElement schema type: */
class SOAP_CMAC gapi1ResultElementArray
{
public:
	gapi1__ResultElement **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_gapi1ResultElementArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         gapi1ResultElementArray() : __ptr(NULL), soap(NULL) { }
	virtual ~gapi1ResultElementArray() { }
};
#endif

#ifndef SOAP_TYPE_gapi1DirectoryCategoryArray
#define SOAP_TYPE_gapi1DirectoryCategoryArray (18)
/* SOAP encoded array of gapi1:DirectoryCategory schema type: */
class SOAP_CMAC gapi1DirectoryCategoryArray
{
public:
	gapi1__DirectoryCategory **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_gapi1DirectoryCategoryArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         gapi1DirectoryCategoryArray() : __ptr(NULL), soap(NULL) { }
	virtual ~gapi1DirectoryCategoryArray() { }
};
#endif

#ifndef SOAP_TYPE_gapi1__doGetCachedPageResponse
#define SOAP_TYPE_gapi1__doGetCachedPageResponse (30)
/* gapi1:doGetCachedPageResponse */
struct gapi1__doGetCachedPageResponse
{
public:
	xsd__base64Binary return_;	/* RPC return element */	/* required element of type xsd:base64Binary */
};
#endif

#ifndef SOAP_TYPE_gapi1__doGetCachedPage
#define SOAP_TYPE_gapi1__doGetCachedPage (31)
/* gapi1:doGetCachedPage */
struct gapi1__doGetCachedPage
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string url;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_gapi1__doSpellingSuggestionResponse
#define SOAP_TYPE_gapi1__doSpellingSuggestionResponse (34)
/* gapi1:doSpellingSuggestionResponse */
struct gapi1__doSpellingSuggestionResponse
{
public:
	std::string return_;	/* RPC return element */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_gapi1__doSpellingSuggestion
#define SOAP_TYPE_gapi1__doSpellingSuggestion (35)
/* gapi1:doSpellingSuggestion */
struct gapi1__doSpellingSuggestion
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string phrase;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_gapi1__doGoogleSearchResponse
#define SOAP_TYPE_gapi1__doGoogleSearchResponse (36)
/* gapi1:doGoogleSearchResponse */
struct gapi1__doGoogleSearchResponse
{
public:
	gapi1__GoogleSearchResult *return_;	/* RPC return element */	/* optional element of type gapi1:GoogleSearchResult */
};
#endif

#ifndef SOAP_TYPE_gapi1__doGoogleSearch
#define SOAP_TYPE_gapi1__doGoogleSearch (40)
/* gapi1:doGoogleSearch */
struct gapi1__doGoogleSearch
{
public:
	std::string key;	/* required element of type xsd:string */
	std::string q;	/* required element of type xsd:string */
	int start;	/* required element of type xsd:int */
	int maxResults;	/* required element of type xsd:int */
	bool filter;	/* required element of type xsd:boolean */
	std::string restrict_;	/* required element of type xsd:string */
	bool safeSearch;	/* required element of type xsd:boolean */
	std::string lr;	/* required element of type xsd:string */
	std::string ie;	/* required element of type xsd:string */
	std::string oe;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (43)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	void *dummy;	/* transient */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (44)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (46)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (47)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (48)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__SOAP_ENC__arrayType
#define SOAP_TYPE__SOAP_ENC__arrayType (14)
typedef std::string _SOAP_ENC__arrayType;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 gapi1__doGetCachedPage(struct soap*, std::string key, std::string url, xsd__base64Binary &return_);

SOAP_FMAC5 int SOAP_FMAC6 gapi1__doSpellingSuggestion(struct soap*, std::string key, std::string phrase, std::string &return_);

SOAP_FMAC5 int SOAP_FMAC6 gapi1__doGoogleSearch(struct soap*, std::string key, std::string q, int start, int maxResults, bool filter, std::string restrict_, bool safeSearch, std::string lr, std::string ie, std::string oe, struct gapi1__doGoogleSearchResponse &_param_1);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_gapi1__doGetCachedPage(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string key, std::string url, xsd__base64Binary &return_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_gapi1__doSpellingSuggestion(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string key, std::string phrase, std::string &return_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_gapi1__doGoogleSearch(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string key, std::string q, int start, int maxResults, bool filter, std::string restrict_, bool safeSearch, std::string lr, std::string ie, std::string oe, struct gapi1__doGoogleSearchResponse &_param_1);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 GAPI_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 GAPI_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_gapi1__doGetCachedPage(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_gapi1__doSpellingSuggestion(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_gapi1__doGoogleSearch(struct soap*);

#endif

/* End of GAPIStub.h */
