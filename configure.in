# generated 2005/12/14 20:48:47 SGT by fabrice@amra.dyndns.org.(none)
# using glademm V2.6.0

AC_PREREQ(2.50)
AC_INIT(pinot, 0.83,[fabricecolin@users.berlios.de])
AM_INIT_AUTOMAKE
AC_CONFIG_HEADERS(config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AM_PROG_LIBTOOL

dnl An index with a version older than this should be upgraded
AC_DEFINE_UNQUOTED(PINOT_INDEX_MIN_VERSION,"0.80",
    [Minimum index version])

dnl gettext support
GETTEXT_PACKAGE=pinot
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",
		[the gettext domain])

dnl Add the languages which your application supports here.
ALL_LINGUAS="de es fr it nl pt pt_BR ru sv zh_TW"
#AM_GNU_GETTEXT([external]) 
AM_GLIB_GNU_GETTEXT

dnl Set PACKAGE_LOCALE_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale",
		[Define to the location of locale files.])
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale",
		[Define to the location of locale files.])
fi
dnl And set PREFIX in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PREFIX, "${ac_default_prefix}",
		[Define to the package prefix.])
else
  AC_DEFINE_UNQUOTED(PREFIX, "${prefix}",
		[Define to the package prefix.])
fi

AS_AC_EXPAND(DATADIR, $datadir)
AS_AC_EXPAND(BINDIR, $bindir)

dnl Location of system directories
AS_AC_EXPAND(SYSCONFDIR, $sysconfdir)
AC_DEFINE_UNQUOTED(SYSCONFDIR, "$SYSCONFDIR",
		[Define to the system configuration directory.])
AS_AC_EXPAND(LIBDIR, $libdir)
AC_DEFINE_UNQUOTED(LIBDIR, "$LIBDIR",
		[Define to the libraries directory.])

dnl Set DBUS_SERVICES_DIR in de.berlios.Pinot.service.
DBUS_SERVICES_DIR="$DATADIR/dbus-1/services"
AC_SUBST(BINDIR)
AC_SUBST(DBUS_SERVICES_DIR)
AC_DEFINE_UNQUOTED(DBUS_SERVICES_DIR, "$DBUS_SERVICES_DIR",
		[Define to the DBUS services directory.])

AC_LANG_CPLUSPLUS

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
AC_PATH_PROG(DESKTOP_INSTALL, desktop-file-install, no)

dnl DEBUG mode
AC_MSG_CHECKING(whether to enable DEBUG mode)
AC_ARG_ENABLE(debug,
   [AS_HELP_STRING([--enable-debug], [enable debug [default=no]])],
   ,[enable_debug=no])
if test "x$enable_debug" = "xyes"; then
   if test "x$GCC" = "xyes"; then
      CXXFLAGS="$CXXFLAGS -ggdb3 -O0 -DDEBUG"
   fi
else
   CXXFLAGS="$CXXFLAGS -DNDEBUG"
   enable_debug="no"
fi
AC_MSG_RESULT($enable_debug)

dnl SOAP API support
AC_MSG_CHECKING(whether to enable SOAP support)
AC_ARG_ENABLE(soap,
   [AS_HELP_STRING([--enable-soap], [enable SOAP support [default=no]])],
   ,[enable_soap=no])
if test "x$enable_soap" != "xyes"; then
   SOAP_CFLAGS=""
   SOAP_LIBS=""
   enable_soap=no
fi
AC_MSG_RESULT($enable_soap)
AM_CONDITIONAL(HAVE_SOAP, false)
if test "x$enable_soap" = "xyes"; then
   PKG_CHECK_MODULES(SOAP, gsoap)
   SOAP_CFLAGS="-DHAVE_GOOGLEAPI $SOAP_CFLAGS"
   AM_CONDITIONAL(HAVE_SOAP, true)
   SOAP_LIBS="-lSearchGoogle $SOAP_LIBS -lSearchSOAP"
fi
AC_SUBST(SOAP_CFLAGS)
AC_SUBST(SOAP_LIBS)

dnl Neon or Curl ?
AC_MSG_CHECKING(which HTTP library to use)
AC_ARG_WITH(http,
   [AS_HELP_STRING([--with-http=@<:@neon|curl@:>@], [which HTTP library to use [default=curl]])])
httplibrary=$with_http
if test "x$httplibrary" = "x"; then
   httplibrary="curl"
fi
AC_MSG_RESULT($httplibrary)

testforssl="no"
case "$httplibrary" in
neon)
PKG_CHECK_MODULES(NEON, neon >= 0.24 )
testforssl="yes"
EXTRA_HTTP_CFLAGS="-DUSE_NEON -DUSE_SSL"
HTTP_DOWNLOADER="NeonDownloader"
;;
curl)
AC_PATH_PROG(CURL_CONFIG, curl-config, no)
if test "$CURL_CONFIG" = "no" ; then
   AC_MSG_ERROR([Can't find curl-config in $PATH.])
   exit 1
fi
CURL_CFLAGS=`$CURL_CONFIG --cflags`
CURL_LIBS=`$CURL_CONFIG --libs`
AC_MSG_CHECKING(whether curl needs OpenSSL)
CURL_SSL_FEATURE=`$CURL_CONFIG --features | grep -i SSL`
if test "x$CURL_SSL_FEATURE" = "x"; then
   EXTRA_HTTP_CFLAGS="-DUSE_CURL"
   AC_MSG_RESULT(no)
else
   EXTRA_HTTP_CFLAGS="-DUSE_CURL -DUSE_SSL"
   AC_MSG_RESULT(yes)
   testforssl="yes"
fi
HTTP_DOWNLOADER="CurlDownloader"
;;
esac
AC_SUBST(HTTP_DOWNLOADER)

dnl OpenSSL
dnl If no path is provided, fall back on pkg-config
if test "$testforssl" = "yes" ; then
   AC_ARG_WITH(ssl,
   [AS_HELP_STRING([--with-ssl=PATH], [where to look for OpenSSL [default=/usr/local/ssl]])])
   sslpath=$with_ssl
   dnl We want a prefix, not yes or no
   case "$sslpath" in
   yes)
   sslpath="/usr/local/ssl"
   ;;
   no)
   sslpath="/usr/local/ssl"
   ;;
   esac

   if test "x$sslpath" = "x"; then
      PKG_CHECK_MODULES(SSL, openssl >= 0.9.7 )
   else
      SSL_CFLAGS="-I$sslpath/include -I$sslpath/include/openssl"
      SSL_LIBS="-L$sslpath/lib -lssl -lcrypto"
   fi
fi

dnl Xapian
AC_PATH_PROG(XAPIAN_CONFIG, xapian-config, no)
if test "$XAPIAN_CONFIG" = "no" ; then
   AC_MSG_ERROR([Can't find xapian-config in $PATH.])
   exit 1
fi
XAPIAN_CFLAGS=`$XAPIAN_CONFIG --cxxflags`
XAPIAN_LIBS=`$XAPIAN_CONFIG --libs`
XAPIAN_NUM_VERSION=`xapian-config --version | $SED -e "s/xapian-config - xapian-core //g" | $AWK 'BEGIN { FS = "."; } { printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
AC_DEFINE_UNQUOTED(XAPIAN_NUM_VERSION,$XAPIAN_NUM_VERSION,
    [Xapian version number])
AC_MSG_CHECKING(for Xapian >= 1.0.3)
if test $XAPIAN_NUM_VERSION -gt 1000002; then
   AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
   AC_MSG_ERROR([You need at least Xapian 1.0.3])
   exit 1
fi

dnl inotify
linuxinotify="no"
AM_CONDITIONAL(HAVE_LINUX_INOTIFY, false)
AC_CHECK_HEADERS([linux/inotify.h],
   [linuxinotify="yes"
   AM_CONDITIONAL(HAVE_LINUX_INOTIFY, true)
   ])
if test "$linuxinotify" = "no" ; then
   AC_CHECK_HEADERS([sys/inotify.h],
   [linuxinotify="yes"
   AM_CONDITIONAL(HAVE_LINUX_INOTIFY, true)
   ])
fi

dnl boost Spirit 
AM_CONDITIONAL(HAVE_BOOST_SPIRIT, false)
AC_CHECK_HEADERS([boost/spirit/core.hpp],
   [AM_CONDITIONAL(HAVE_BOOST_SPIRIT, true)
   ])

dnl TextCat
AC_CHECK_HEADERS([textcat.h],,
   [AC_CHECK_HEADERS([libtextcat/textcat.h],,
   [AC_MSG_ERROR([Can't find textcat.h.])])
   ])
AC_CHECK_LIB(textcat, textcat_Cat,
   [AM_CONDITIONAL(HAVE_TEXTCAT_CAT, true)],
   [AM_CONDITIONAL(HAVE_TEXTCAT_CAT, false)]
   )

dnl pthreads
pthreadlib=""
AC_SUBST(PTHREAD_LIBS)
AC_MSG_CHECKING(if pthreads is available)
ORIG_LIBS="$LIBS"
for candidatelib in '' '-pthread' '-lc_r' '-lthr' '-lpthread'; do
   if test -z "$use_posix_mutex" ; then
      LIBS="$candidatelib $ORIG_LIBS"
      AC_TRY_LINK([#include <pthread.h>],
         [pthread_mutex_t lck;
         pthread_mutex_init(&lck, 0);
         pthread_mutex_lock(&lck);
         pthread_mutex_unlock(&lck);
         pthread_mutex_destroy(&lck);],
         [PTHREAD_LIBS="$candidatelib"
         pthreadlib=candidatelib]
      )
   fi
done
LIBS="$ORIG_LIBS"
if test "$pthreadlib" ; then
   if test -z "$PTHREAD_LIBS" ; then
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT([yes with $PTHREAD_LIBS])
   fi
else
   AC_MSG_RESULT(no)
   AC_MSG_ERROR([Can't find pthreads.])
   exit 1
fi

dnl Other libraries
MISC_LIBS="-lcrypt $PTHREAD_LIBS"
AC_SUBST(MISC_LIBS)
AC_CHECK_HEADERS([sys/vfs.h sys/statfs.h sys/mount.h sys/statvfs.h])
PKG_CHECK_MODULES(MIMEINFO, shared-mime-info )
SHARED_MIME_INFO_PREFIX=`pkg-config --variable=prefix shared-mime-info`
AC_SUBST(SHARED_MIME_INFO_PREFIX)
AC_DEFINE_UNQUOTED(SHARED_MIME_INFO_PREFIX,"$SHARED_MIME_INFO_PREFIX",
    [the shared-mime-info prefix])
PKG_CHECK_MODULES(TAGLIB, taglib >= 1.4 )
AC_SUBST(TAGLIB_CFLAGS)
AC_SUBST(TAGLIB_LIBS)
PKG_CHECK_MODULES(SQL, sqlite3 >= 3.1 )
AC_SUBST(SQL_CFLAGS)
AC_SUBST(SQL_LIBS)
HTTP_CFLAGS="$NEON_CFLAGS $CURL_CFLAGS $SSL_CFLAGS $EXTRA_HTTP_CFLAGS"
HTTP_LIBS="$NEON_LIBS $CURL_LIBS $SSL_LIBS"
AC_SUBST(HTTP_CFLAGS)
AC_SUBST(HTTP_LIBS)
PKG_CHECK_MODULES(GMIME, gmime-2.0 >= 2.0 )
AC_SUBST(GMIME_CFLAGS)
AC_SUBST(GMIME_LIBS)
PKG_CHECK_MODULES(XML, libxml++-2.6 >= 2.12 )
AC_SUBST(XML_CFLAGS)
AC_SUBST(XML_LIBS)
INDEX_CFLAGS="$XAPIAN_CFLAGS"
INDEX_LIBS="$XAPIAN_LIBS -ltextcat"
AC_SUBST(INDEX_CFLAGS)
AC_SUBST(INDEX_LIBS)
PKG_CHECK_MODULES(DBUS, dbus-glib-1)
AC_SUBST(DBUS_CFLAGS)
AC_SUBST(DBUS_LIBS)
DBUS_NUM_VERSION=`pkg-config --modversion dbus-1 | $AWK 'BEGIN { FS = "."; } { printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
AC_DEFINE_UNQUOTED(DBUS_NUM_VERSION,$DBUS_NUM_VERSION,
    [DBus version number])
PKG_CHECK_MODULES(SIGCPP, sigc++-2.0 >= 2.0 )
AC_SUBST(SIGCPP_CFLAGS)
AC_SUBST(SIGCPP_LIBS)
PKG_CHECK_MODULES(GTHREAD, gthread-2.0 >= 2.6 )
AC_SUBST(GTHREAD_CFLAGS)
AC_SUBST(GTHREAD_LIBS)
PKG_CHECK_MODULES(GLIBMM, glibmm-2.4 >= 2.6 )
AC_SUBST(GLIBMM_CFLAGS)
AC_SUBST(GLIBMM_LIBS)
PKG_CHECK_MODULES(GTKMM, gtkmm-2.4 >= 2.10 )
AC_SUBST(GTKMM_CFLAGS)
AC_SUBST(GTKMM_LIBS)

dnl Check for specific functions
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(timegm)
AC_CHECK_FUNCS(lstat)
AC_CHECK_FUNCS(mmap)
AC_CHECK_FUNCS(socketpair)
AC_CHECK_FUNCS(fork)
AC_CHECK_FUNCS(setrlimit)
AC_CHECK_FUNCS(statvfs)
AC_CHECK_FUNCS(statfs)
AC_CHECK_FUNCS(sysctlbyname)

AC_OUTPUT( pinot.spec UI/GTK2/src/de.berlios.Pinot.service Makefile \
	Utils/Makefile Tokenize/Makefile SQL/Makefile po/Makefile.in Collect/Makefile \
	IndexSearch/Google/Makefile IndexSearch/Xapian/Makefile IndexSearch/Makefile \
	Monitor/Makefile UI/GTK2/src/Makefile )

